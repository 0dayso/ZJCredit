// Decompiled with JetBrains decompiler
// Type: System.Runtime.InteropServices.TCEAdapterGen.EventProviderWriter
// Assembly: mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: 2A55D587-43EC-479C-866B-425E85A3236D
// Assembly location: C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll

using System.Collections;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices.ComTypes;
using System.Threading;

namespace System.Runtime.InteropServices.TCEAdapterGen
{
  internal class EventProviderWriter
  {
    private readonly Type[] MonitorEnterParamTypes = new Type[2]{ typeof (object), Type.GetType("System.Boolean&") };
    private const BindingFlags DefaultLookup = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public;
    private ModuleBuilder m_OutputModule;
    private string m_strDestTypeName;
    private Type m_EventItfType;
    private Type m_SrcItfType;
    private Type m_SinkHelperType;

    public EventProviderWriter(ModuleBuilder OutputModule, string strDestTypeName, Type EventItfType, Type SrcItfType, Type SinkHelperType)
    {
      this.m_OutputModule = OutputModule;
      this.m_strDestTypeName = strDestTypeName;
      this.m_EventItfType = EventItfType;
      this.m_SrcItfType = SrcItfType;
      this.m_SinkHelperType = SinkHelperType;
    }

    public Type Perform()
    {
      TypeBuilder OutputTypeBuilder = this.m_OutputModule.DefineType(this.m_strDestTypeName, TypeAttributes.Sealed, typeof (object), new Type[2]{ this.m_EventItfType, typeof (IDisposable) });
      FieldBuilder fbCPC = OutputTypeBuilder.DefineField("m_ConnectionPointContainer", typeof (IConnectionPointContainer), FieldAttributes.Private);
      FieldBuilder fieldBuilder = OutputTypeBuilder.DefineField("m_aEventSinkHelpers", typeof (ArrayList), FieldAttributes.Private);
      FieldBuilder fbEventCP = OutputTypeBuilder.DefineField("m_ConnectionPoint", typeof (IConnectionPoint), FieldAttributes.Private);
      MethodBuilder mbInitSrcItf = this.DefineInitSrcItfMethod(OutputTypeBuilder, this.m_SrcItfType, fieldBuilder, fbEventCP, fbCPC);
      MethodInfo[] nonPropertyMethods = TCEAdapterGenerator.GetNonPropertyMethods(this.m_SrcItfType);
      for (int index = 0; index < nonPropertyMethods.Length; ++index)
      {
        if (this.m_SrcItfType == nonPropertyMethods[index].DeclaringType)
        {
          this.DefineAddEventMethod(OutputTypeBuilder, nonPropertyMethods[index], this.m_SinkHelperType, fieldBuilder, fbEventCP, mbInitSrcItf);
          this.DefineRemoveEventMethod(OutputTypeBuilder, nonPropertyMethods[index], this.m_SinkHelperType, fieldBuilder, fbEventCP);
        }
      }
      this.DefineConstructor(OutputTypeBuilder, fbCPC);
      MethodBuilder FinalizeMethod = this.DefineFinalizeMethod(OutputTypeBuilder, this.m_SinkHelperType, fieldBuilder, fbEventCP);
      this.DefineDisposeMethod(OutputTypeBuilder, FinalizeMethod);
      return OutputTypeBuilder.CreateType();
    }

    private MethodBuilder DefineAddEventMethod(TypeBuilder OutputTypeBuilder, MethodInfo SrcItfMethod, Type SinkHelperClass, FieldBuilder fbSinkHelperArray, FieldBuilder fbEventCP, MethodBuilder mbInitSrcItf)
    {
      FieldInfo field1 = SinkHelperClass.GetField("m_" + SrcItfMethod.Name + "Delegate");
      FieldInfo field2 = SinkHelperClass.GetField("m_dwCookie");
      ConstructorInfo constructor = SinkHelperClass.GetConstructor(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic, (Binder) null, new Type[0], (ParameterModifier[]) null);
      MethodInfo method1 = typeof (IConnectionPoint).GetMethod("Advise");
      Type[] types = new Type[1]{ typeof (object) };
      MethodInfo method2 = typeof (ArrayList).GetMethod("Add", types, (ParameterModifier[]) null);
      MethodInfo method3 = typeof (Monitor).GetMethod("Enter", this.MonitorEnterParamTypes, (ParameterModifier[]) null);
      types[0] = typeof (object);
      MethodInfo method4 = typeof (Monitor).GetMethod("Exit", types, (ParameterModifier[]) null);
      Type[] parameterTypes = new Type[1]{ field1.FieldType };
      MethodBuilder methodBuilder1 = OutputTypeBuilder.DefineMethod("add_" + SrcItfMethod.Name, MethodAttributes.Public | MethodAttributes.Virtual, (Type) null, parameterTypes);
      ILGenerator ilGenerator = methodBuilder1.GetILGenerator();
      Label label1 = ilGenerator.DefineLabel();
      Type localType1 = SinkHelperClass;
      LocalBuilder localBuilder1 = ilGenerator.DeclareLocal(localType1);
      Type localType2 = typeof (int);
      LocalBuilder localBuilder2 = ilGenerator.DeclareLocal(localType2);
      Type localType3 = typeof (bool);
      LocalBuilder localBuilder3 = ilGenerator.DeclareLocal(localType3);
      ilGenerator.BeginExceptionBlock();
      OpCode opcode1 = OpCodes.Ldarg;
      int num1 = 0;
      ilGenerator.Emit(opcode1, (short) num1);
      OpCode opcode2 = OpCodes.Ldloca_S;
      LocalBuilder local1 = localBuilder3;
      ilGenerator.Emit(opcode2, local1);
      OpCode opcode3 = OpCodes.Call;
      MethodInfo meth1 = method3;
      ilGenerator.Emit(opcode3, meth1);
      OpCode opcode4 = OpCodes.Ldarg;
      int num2 = 0;
      ilGenerator.Emit(opcode4, (short) num2);
      OpCode opcode5 = OpCodes.Ldfld;
      FieldBuilder fieldBuilder1 = fbEventCP;
      ilGenerator.Emit(opcode5, (FieldInfo) fieldBuilder1);
      OpCode opcode6 = OpCodes.Brtrue;
      Label label2 = label1;
      ilGenerator.Emit(opcode6, label2);
      OpCode opcode7 = OpCodes.Ldarg;
      int num3 = 0;
      ilGenerator.Emit(opcode7, (short) num3);
      OpCode opcode8 = OpCodes.Call;
      MethodBuilder methodBuilder2 = mbInitSrcItf;
      ilGenerator.Emit(opcode8, (MethodInfo) methodBuilder2);
      Label loc1 = label1;
      ilGenerator.MarkLabel(loc1);
      OpCode opcode9 = OpCodes.Newobj;
      ConstructorInfo con = constructor;
      ilGenerator.Emit(opcode9, con);
      OpCode opcode10 = OpCodes.Stloc;
      LocalBuilder local2 = localBuilder1;
      ilGenerator.Emit(opcode10, local2);
      OpCode opcode11 = OpCodes.Ldc_I4_0;
      ilGenerator.Emit(opcode11);
      OpCode opcode12 = OpCodes.Stloc;
      LocalBuilder local3 = localBuilder2;
      ilGenerator.Emit(opcode12, local3);
      OpCode opcode13 = OpCodes.Ldarg;
      int num4 = 0;
      ilGenerator.Emit(opcode13, (short) num4);
      OpCode opcode14 = OpCodes.Ldfld;
      FieldBuilder fieldBuilder2 = fbEventCP;
      ilGenerator.Emit(opcode14, (FieldInfo) fieldBuilder2);
      OpCode opcode15 = OpCodes.Ldloc;
      LocalBuilder local4 = localBuilder1;
      ilGenerator.Emit(opcode15, local4);
      OpCode opcode16 = OpCodes.Castclass;
      Type cls1 = typeof (object);
      ilGenerator.Emit(opcode16, cls1);
      OpCode opcode17 = OpCodes.Ldloca;
      LocalBuilder local5 = localBuilder2;
      ilGenerator.Emit(opcode17, local5);
      OpCode opcode18 = OpCodes.Callvirt;
      MethodInfo meth2 = method1;
      ilGenerator.Emit(opcode18, meth2);
      OpCode opcode19 = OpCodes.Ldloc;
      LocalBuilder local6 = localBuilder1;
      ilGenerator.Emit(opcode19, local6);
      OpCode opcode20 = OpCodes.Ldloc;
      LocalBuilder local7 = localBuilder2;
      ilGenerator.Emit(opcode20, local7);
      OpCode opcode21 = OpCodes.Stfld;
      FieldInfo field3 = field2;
      ilGenerator.Emit(opcode21, field3);
      OpCode opcode22 = OpCodes.Ldloc;
      LocalBuilder local8 = localBuilder1;
      ilGenerator.Emit(opcode22, local8);
      OpCode opcode23 = OpCodes.Ldarg;
      int num5 = 1;
      ilGenerator.Emit(opcode23, (short) num5);
      OpCode opcode24 = OpCodes.Stfld;
      FieldInfo field4 = field1;
      ilGenerator.Emit(opcode24, field4);
      OpCode opcode25 = OpCodes.Ldarg;
      int num6 = 0;
      ilGenerator.Emit(opcode25, (short) num6);
      OpCode opcode26 = OpCodes.Ldfld;
      FieldBuilder fieldBuilder3 = fbSinkHelperArray;
      ilGenerator.Emit(opcode26, (FieldInfo) fieldBuilder3);
      OpCode opcode27 = OpCodes.Ldloc;
      LocalBuilder local9 = localBuilder1;
      ilGenerator.Emit(opcode27, local9);
      OpCode opcode28 = OpCodes.Castclass;
      Type cls2 = typeof (object);
      ilGenerator.Emit(opcode28, cls2);
      OpCode opcode29 = OpCodes.Callvirt;
      MethodInfo meth3 = method2;
      ilGenerator.Emit(opcode29, meth3);
      OpCode opcode30 = OpCodes.Pop;
      ilGenerator.Emit(opcode30);
      ilGenerator.BeginFinallyBlock();
      Label label3 = ilGenerator.DefineLabel();
      OpCode opcode31 = OpCodes.Ldloc;
      LocalBuilder local10 = localBuilder3;
      ilGenerator.Emit(opcode31, local10);
      OpCode opcode32 = OpCodes.Brfalse_S;
      Label label4 = label3;
      ilGenerator.Emit(opcode32, label4);
      OpCode opcode33 = OpCodes.Ldarg;
      int num7 = 0;
      ilGenerator.Emit(opcode33, (short) num7);
      OpCode opcode34 = OpCodes.Call;
      MethodInfo meth4 = method4;
      ilGenerator.Emit(opcode34, meth4);
      Label loc2 = label3;
      ilGenerator.MarkLabel(loc2);
      ilGenerator.EndExceptionBlock();
      OpCode opcode35 = OpCodes.Ret;
      ilGenerator.Emit(opcode35);
      return methodBuilder1;
    }

    private MethodBuilder DefineRemoveEventMethod(TypeBuilder OutputTypeBuilder, MethodInfo SrcItfMethod, Type SinkHelperClass, FieldBuilder fbSinkHelperArray, FieldBuilder fbEventCP)
    {
      FieldInfo field1 = SinkHelperClass.GetField("m_" + SrcItfMethod.Name + "Delegate");
      FieldInfo field2 = SinkHelperClass.GetField("m_dwCookie");
      Type[] types = new Type[1]{ typeof (int) };
      MethodInfo method1 = typeof (ArrayList).GetMethod("RemoveAt", types, (ParameterModifier[]) null);
      MethodInfo getMethod1 = typeof (ArrayList).GetProperty("Item").GetGetMethod();
      MethodInfo getMethod2 = typeof (ArrayList).GetProperty("Count").GetGetMethod();
      types[0] = typeof (Delegate);
      MethodInfo method2 = typeof (Delegate).GetMethod("Equals", types, (ParameterModifier[]) null);
      MethodInfo method3 = typeof (Monitor).GetMethod("Enter", this.MonitorEnterParamTypes, (ParameterModifier[]) null);
      types[0] = typeof (object);
      MethodInfo method4 = typeof (Monitor).GetMethod("Exit", types, (ParameterModifier[]) null);
      MethodInfo method5 = typeof (IConnectionPoint).GetMethod("Unadvise");
      MethodInfo method6 = typeof (Marshal).GetMethod("ReleaseComObject");
      Type[] parameterTypes = new Type[1]{ field1.FieldType };
      MethodBuilder methodBuilder = OutputTypeBuilder.DefineMethod("remove_" + SrcItfMethod.Name, MethodAttributes.Public | MethodAttributes.Virtual, (Type) null, parameterTypes);
      ILGenerator ilGenerator = methodBuilder.GetILGenerator();
      Type localType1 = typeof (int);
      LocalBuilder localBuilder1 = ilGenerator.DeclareLocal(localType1);
      Type localType2 = typeof (int);
      LocalBuilder localBuilder2 = ilGenerator.DeclareLocal(localType2);
      Type localType3 = SinkHelperClass;
      LocalBuilder localBuilder3 = ilGenerator.DeclareLocal(localType3);
      Type localType4 = typeof (bool);
      LocalBuilder localBuilder4 = ilGenerator.DeclareLocal(localType4);
      Label label1 = ilGenerator.DefineLabel();
      Label label2 = ilGenerator.DefineLabel();
      Label label3 = ilGenerator.DefineLabel();
      ilGenerator.DefineLabel();
      ilGenerator.BeginExceptionBlock();
      OpCode opcode1 = OpCodes.Ldarg;
      int num1 = 0;
      ilGenerator.Emit(opcode1, (short) num1);
      OpCode opcode2 = OpCodes.Ldloca_S;
      LocalBuilder local1 = localBuilder4;
      ilGenerator.Emit(opcode2, local1);
      OpCode opcode3 = OpCodes.Call;
      MethodInfo meth1 = method3;
      ilGenerator.Emit(opcode3, meth1);
      OpCode opcode4 = OpCodes.Ldarg;
      int num2 = 0;
      ilGenerator.Emit(opcode4, (short) num2);
      OpCode opcode5 = OpCodes.Ldfld;
      FieldBuilder fieldBuilder1 = fbSinkHelperArray;
      ilGenerator.Emit(opcode5, (FieldInfo) fieldBuilder1);
      OpCode opcode6 = OpCodes.Brfalse;
      Label label4 = label2;
      ilGenerator.Emit(opcode6, label4);
      OpCode opcode7 = OpCodes.Ldarg;
      int num3 = 0;
      ilGenerator.Emit(opcode7, (short) num3);
      OpCode opcode8 = OpCodes.Ldfld;
      FieldBuilder fieldBuilder2 = fbSinkHelperArray;
      ilGenerator.Emit(opcode8, (FieldInfo) fieldBuilder2);
      OpCode opcode9 = OpCodes.Callvirt;
      MethodInfo meth2 = getMethod2;
      ilGenerator.Emit(opcode9, meth2);
      OpCode opcode10 = OpCodes.Stloc;
      LocalBuilder local2 = localBuilder1;
      ilGenerator.Emit(opcode10, local2);
      OpCode opcode11 = OpCodes.Ldc_I4;
      int num4 = 0;
      ilGenerator.Emit(opcode11, num4);
      OpCode opcode12 = OpCodes.Stloc;
      LocalBuilder local3 = localBuilder2;
      ilGenerator.Emit(opcode12, local3);
      OpCode opcode13 = OpCodes.Ldc_I4;
      int num5 = 0;
      ilGenerator.Emit(opcode13, num5);
      OpCode opcode14 = OpCodes.Ldloc;
      LocalBuilder local4 = localBuilder1;
      ilGenerator.Emit(opcode14, local4);
      OpCode opcode15 = OpCodes.Bge;
      Label label5 = label2;
      ilGenerator.Emit(opcode15, label5);
      Label loc1 = label1;
      ilGenerator.MarkLabel(loc1);
      OpCode opcode16 = OpCodes.Ldarg;
      int num6 = 0;
      ilGenerator.Emit(opcode16, (short) num6);
      OpCode opcode17 = OpCodes.Ldfld;
      FieldBuilder fieldBuilder3 = fbSinkHelperArray;
      ilGenerator.Emit(opcode17, (FieldInfo) fieldBuilder3);
      OpCode opcode18 = OpCodes.Ldloc;
      LocalBuilder local5 = localBuilder2;
      ilGenerator.Emit(opcode18, local5);
      OpCode opcode19 = OpCodes.Callvirt;
      MethodInfo meth3 = getMethod1;
      ilGenerator.Emit(opcode19, meth3);
      OpCode opcode20 = OpCodes.Castclass;
      Type cls1 = SinkHelperClass;
      ilGenerator.Emit(opcode20, cls1);
      OpCode opcode21 = OpCodes.Stloc;
      LocalBuilder local6 = localBuilder3;
      ilGenerator.Emit(opcode21, local6);
      OpCode opcode22 = OpCodes.Ldloc;
      LocalBuilder local7 = localBuilder3;
      ilGenerator.Emit(opcode22, local7);
      OpCode opcode23 = OpCodes.Ldfld;
      FieldInfo field3 = field1;
      ilGenerator.Emit(opcode23, field3);
      OpCode opcode24 = OpCodes.Ldnull;
      ilGenerator.Emit(opcode24);
      OpCode opcode25 = OpCodes.Beq;
      Label label6 = label3;
      ilGenerator.Emit(opcode25, label6);
      OpCode opcode26 = OpCodes.Ldloc;
      LocalBuilder local8 = localBuilder3;
      ilGenerator.Emit(opcode26, local8);
      OpCode opcode27 = OpCodes.Ldfld;
      FieldInfo field4 = field1;
      ilGenerator.Emit(opcode27, field4);
      OpCode opcode28 = OpCodes.Ldarg;
      int num7 = 1;
      ilGenerator.Emit(opcode28, (short) num7);
      OpCode opcode29 = OpCodes.Castclass;
      Type cls2 = typeof (object);
      ilGenerator.Emit(opcode29, cls2);
      OpCode opcode30 = OpCodes.Callvirt;
      MethodInfo meth4 = method2;
      ilGenerator.Emit(opcode30, meth4);
      OpCode opcode31 = OpCodes.Ldc_I4;
      int num8 = (int) byte.MaxValue;
      ilGenerator.Emit(opcode31, num8);
      OpCode opcode32 = OpCodes.And;
      ilGenerator.Emit(opcode32);
      OpCode opcode33 = OpCodes.Ldc_I4;
      int num9 = 0;
      ilGenerator.Emit(opcode33, num9);
      OpCode opcode34 = OpCodes.Beq;
      Label label7 = label3;
      ilGenerator.Emit(opcode34, label7);
      OpCode opcode35 = OpCodes.Ldarg;
      int num10 = 0;
      ilGenerator.Emit(opcode35, (short) num10);
      OpCode opcode36 = OpCodes.Ldfld;
      FieldBuilder fieldBuilder4 = fbSinkHelperArray;
      ilGenerator.Emit(opcode36, (FieldInfo) fieldBuilder4);
      OpCode opcode37 = OpCodes.Ldloc;
      LocalBuilder local9 = localBuilder2;
      ilGenerator.Emit(opcode37, local9);
      OpCode opcode38 = OpCodes.Callvirt;
      MethodInfo meth5 = method1;
      ilGenerator.Emit(opcode38, meth5);
      OpCode opcode39 = OpCodes.Ldarg;
      int num11 = 0;
      ilGenerator.Emit(opcode39, (short) num11);
      OpCode opcode40 = OpCodes.Ldfld;
      FieldBuilder fieldBuilder5 = fbEventCP;
      ilGenerator.Emit(opcode40, (FieldInfo) fieldBuilder5);
      OpCode opcode41 = OpCodes.Ldloc;
      LocalBuilder local10 = localBuilder3;
      ilGenerator.Emit(opcode41, local10);
      OpCode opcode42 = OpCodes.Ldfld;
      FieldInfo field5 = field2;
      ilGenerator.Emit(opcode42, field5);
      OpCode opcode43 = OpCodes.Callvirt;
      MethodInfo meth6 = method5;
      ilGenerator.Emit(opcode43, meth6);
      OpCode opcode44 = OpCodes.Ldloc;
      LocalBuilder local11 = localBuilder1;
      ilGenerator.Emit(opcode44, local11);
      OpCode opcode45 = OpCodes.Ldc_I4;
      int num12 = 1;
      ilGenerator.Emit(opcode45, num12);
      OpCode opcode46 = OpCodes.Bgt;
      Label label8 = label2;
      ilGenerator.Emit(opcode46, label8);
      OpCode opcode47 = OpCodes.Ldarg;
      int num13 = 0;
      ilGenerator.Emit(opcode47, (short) num13);
      OpCode opcode48 = OpCodes.Ldfld;
      FieldBuilder fieldBuilder6 = fbEventCP;
      ilGenerator.Emit(opcode48, (FieldInfo) fieldBuilder6);
      OpCode opcode49 = OpCodes.Call;
      MethodInfo meth7 = method6;
      ilGenerator.Emit(opcode49, meth7);
      OpCode opcode50 = OpCodes.Pop;
      ilGenerator.Emit(opcode50);
      OpCode opcode51 = OpCodes.Ldarg;
      int num14 = 0;
      ilGenerator.Emit(opcode51, (short) num14);
      OpCode opcode52 = OpCodes.Ldnull;
      ilGenerator.Emit(opcode52);
      OpCode opcode53 = OpCodes.Stfld;
      FieldBuilder fieldBuilder7 = fbEventCP;
      ilGenerator.Emit(opcode53, (FieldInfo) fieldBuilder7);
      OpCode opcode54 = OpCodes.Ldarg;
      int num15 = 0;
      ilGenerator.Emit(opcode54, (short) num15);
      OpCode opcode55 = OpCodes.Ldnull;
      ilGenerator.Emit(opcode55);
      OpCode opcode56 = OpCodes.Stfld;
      FieldBuilder fieldBuilder8 = fbSinkHelperArray;
      ilGenerator.Emit(opcode56, (FieldInfo) fieldBuilder8);
      OpCode opcode57 = OpCodes.Br;
      Label label9 = label2;
      ilGenerator.Emit(opcode57, label9);
      Label loc2 = label3;
      ilGenerator.MarkLabel(loc2);
      OpCode opcode58 = OpCodes.Ldloc;
      LocalBuilder local12 = localBuilder2;
      ilGenerator.Emit(opcode58, local12);
      OpCode opcode59 = OpCodes.Ldc_I4;
      int num16 = 1;
      ilGenerator.Emit(opcode59, num16);
      OpCode opcode60 = OpCodes.Add;
      ilGenerator.Emit(opcode60);
      OpCode opcode61 = OpCodes.Stloc;
      LocalBuilder local13 = localBuilder2;
      ilGenerator.Emit(opcode61, local13);
      OpCode opcode62 = OpCodes.Ldloc;
      LocalBuilder local14 = localBuilder2;
      ilGenerator.Emit(opcode62, local14);
      OpCode opcode63 = OpCodes.Ldloc;
      LocalBuilder local15 = localBuilder1;
      ilGenerator.Emit(opcode63, local15);
      OpCode opcode64 = OpCodes.Blt;
      Label label10 = label1;
      ilGenerator.Emit(opcode64, label10);
      Label loc3 = label2;
      ilGenerator.MarkLabel(loc3);
      ilGenerator.BeginFinallyBlock();
      Label label11 = ilGenerator.DefineLabel();
      OpCode opcode65 = OpCodes.Ldloc;
      LocalBuilder local16 = localBuilder4;
      ilGenerator.Emit(opcode65, local16);
      OpCode opcode66 = OpCodes.Brfalse_S;
      Label label12 = label11;
      ilGenerator.Emit(opcode66, label12);
      OpCode opcode67 = OpCodes.Ldarg;
      int num17 = 0;
      ilGenerator.Emit(opcode67, (short) num17);
      OpCode opcode68 = OpCodes.Call;
      MethodInfo meth8 = method4;
      ilGenerator.Emit(opcode68, meth8);
      Label loc4 = label11;
      ilGenerator.MarkLabel(loc4);
      ilGenerator.EndExceptionBlock();
      OpCode opcode69 = OpCodes.Ret;
      ilGenerator.Emit(opcode69);
      return methodBuilder;
    }

    private MethodBuilder DefineInitSrcItfMethod(TypeBuilder OutputTypeBuilder, Type SourceInterface, FieldBuilder fbSinkHelperArray, FieldBuilder fbEventCP, FieldBuilder fbCPC)
    {
      ConstructorInfo constructor1 = typeof (ArrayList).GetConstructor(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public, (Binder) null, new Type[0], (ParameterModifier[]) null);
      byte[] numArray = new byte[16];
      ConstructorInfo constructor2 = typeof (Guid).GetConstructor(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public, (Binder) null, new Type[1]{ typeof (byte[]) }, (ParameterModifier[]) null);
      MethodInfo method = typeof (IConnectionPointContainer).GetMethod("FindConnectionPoint");
      MethodBuilder methodBuilder = OutputTypeBuilder.DefineMethod("Init", MethodAttributes.Private, (Type) null, (Type[]) null);
      ILGenerator ilGenerator = methodBuilder.GetILGenerator();
      LocalBuilder local1 = ilGenerator.DeclareLocal(typeof (IConnectionPoint));
      LocalBuilder local2 = ilGenerator.DeclareLocal(typeof (Guid));
      LocalBuilder local3 = ilGenerator.DeclareLocal(typeof (byte[]));
      ilGenerator.Emit(OpCodes.Ldnull);
      ilGenerator.Emit(OpCodes.Stloc, local1);
      byte[] byteArray = SourceInterface.GUID.ToByteArray();
      ilGenerator.Emit(OpCodes.Ldc_I4, 16);
      ilGenerator.Emit(OpCodes.Newarr, typeof (byte));
      ilGenerator.Emit(OpCodes.Stloc, local3);
      for (int index = 0; index < 16; ++index)
      {
        ilGenerator.Emit(OpCodes.Ldloc, local3);
        ilGenerator.Emit(OpCodes.Ldc_I4, index);
        ilGenerator.Emit(OpCodes.Ldc_I4, (int) byteArray[index]);
        ilGenerator.Emit(OpCodes.Stelem_I1);
      }
      ilGenerator.Emit(OpCodes.Ldloca, local2);
      ilGenerator.Emit(OpCodes.Ldloc, local3);
      ilGenerator.Emit(OpCodes.Call, constructor2);
      ilGenerator.Emit(OpCodes.Ldarg, (short) 0);
      ilGenerator.Emit(OpCodes.Ldfld, (FieldInfo) fbCPC);
      ilGenerator.Emit(OpCodes.Ldloca, local2);
      ilGenerator.Emit(OpCodes.Ldloca, local1);
      ilGenerator.Emit(OpCodes.Callvirt, method);
      ilGenerator.Emit(OpCodes.Ldarg, (short) 0);
      ilGenerator.Emit(OpCodes.Ldloc, local1);
      ilGenerator.Emit(OpCodes.Castclass, typeof (IConnectionPoint));
      ilGenerator.Emit(OpCodes.Stfld, (FieldInfo) fbEventCP);
      ilGenerator.Emit(OpCodes.Ldarg, (short) 0);
      ilGenerator.Emit(OpCodes.Newobj, constructor1);
      ilGenerator.Emit(OpCodes.Stfld, (FieldInfo) fbSinkHelperArray);
      ilGenerator.Emit(OpCodes.Ret);
      return methodBuilder;
    }

    private void DefineConstructor(TypeBuilder OutputTypeBuilder, FieldBuilder fbCPC)
    {
      ConstructorInfo constructor = typeof (object).GetConstructor(BindingFlags.Instance | BindingFlags.Public, (Binder) null, new Type[0], (ParameterModifier[]) null);
      MethodAttributes attributes = MethodAttributes.SpecialName | constructor.Attributes & MethodAttributes.MemberAccessMask;
      ILGenerator ilGenerator = OutputTypeBuilder.DefineMethod(".ctor", attributes, (Type) null, new Type[1]{ typeof (object) }).GetILGenerator();
      OpCode opcode1 = OpCodes.Ldarg;
      int num1 = 0;
      ilGenerator.Emit(opcode1, (short) num1);
      OpCode opcode2 = OpCodes.Call;
      ConstructorInfo con = constructor;
      ilGenerator.Emit(opcode2, con);
      OpCode opcode3 = OpCodes.Ldarg;
      int num2 = 0;
      ilGenerator.Emit(opcode3, (short) num2);
      OpCode opcode4 = OpCodes.Ldarg;
      int num3 = 1;
      ilGenerator.Emit(opcode4, (short) num3);
      OpCode opcode5 = OpCodes.Castclass;
      Type cls = typeof (IConnectionPointContainer);
      ilGenerator.Emit(opcode5, cls);
      OpCode opcode6 = OpCodes.Stfld;
      FieldBuilder fieldBuilder = fbCPC;
      ilGenerator.Emit(opcode6, (FieldInfo) fieldBuilder);
      OpCode opcode7 = OpCodes.Ret;
      ilGenerator.Emit(opcode7);
    }

    private MethodBuilder DefineFinalizeMethod(TypeBuilder OutputTypeBuilder, Type SinkHelperClass, FieldBuilder fbSinkHelper, FieldBuilder fbEventCP)
    {
      FieldInfo field1 = SinkHelperClass.GetField("m_dwCookie");
      MethodInfo getMethod1 = typeof (ArrayList).GetProperty("Item").GetGetMethod();
      MethodInfo getMethod2 = typeof (ArrayList).GetProperty("Count").GetGetMethod();
      MethodInfo method1 = typeof (IConnectionPoint).GetMethod("Unadvise");
      MethodInfo method2 = typeof (Marshal).GetMethod("ReleaseComObject");
      MethodInfo method3 = typeof (Monitor).GetMethod("Enter", this.MonitorEnterParamTypes, (ParameterModifier[]) null);
      MethodInfo method4 = typeof (Monitor).GetMethod("Exit", new Type[1]{ typeof (object) }, (ParameterModifier[]) null);
      MethodBuilder methodBuilder = OutputTypeBuilder.DefineMethod("Finalize", MethodAttributes.Public | MethodAttributes.Virtual, (Type) null, (Type[]) null);
      ILGenerator ilGenerator = methodBuilder.GetILGenerator();
      Type localType1 = typeof (int);
      LocalBuilder localBuilder1 = ilGenerator.DeclareLocal(localType1);
      Type localType2 = typeof (int);
      LocalBuilder localBuilder2 = ilGenerator.DeclareLocal(localType2);
      Type localType3 = SinkHelperClass;
      LocalBuilder localBuilder3 = ilGenerator.DeclareLocal(localType3);
      Type localType4 = typeof (bool);
      LocalBuilder localBuilder4 = ilGenerator.DeclareLocal(localType4);
      ilGenerator.BeginExceptionBlock();
      OpCode opcode1 = OpCodes.Ldarg;
      int num1 = 0;
      ilGenerator.Emit(opcode1, (short) num1);
      OpCode opcode2 = OpCodes.Ldloca_S;
      LocalBuilder local1 = localBuilder4;
      ilGenerator.Emit(opcode2, local1);
      OpCode opcode3 = OpCodes.Call;
      MethodInfo meth1 = method3;
      ilGenerator.Emit(opcode3, meth1);
      Label label1 = ilGenerator.DefineLabel();
      Label label2 = ilGenerator.DefineLabel();
      Label label3 = ilGenerator.DefineLabel();
      OpCode opcode4 = OpCodes.Ldarg;
      int num2 = 0;
      ilGenerator.Emit(opcode4, (short) num2);
      OpCode opcode5 = OpCodes.Ldfld;
      FieldBuilder fieldBuilder1 = fbEventCP;
      ilGenerator.Emit(opcode5, (FieldInfo) fieldBuilder1);
      OpCode opcode6 = OpCodes.Brfalse;
      Label label4 = label3;
      ilGenerator.Emit(opcode6, label4);
      OpCode opcode7 = OpCodes.Ldarg;
      int num3 = 0;
      ilGenerator.Emit(opcode7, (short) num3);
      OpCode opcode8 = OpCodes.Ldfld;
      FieldBuilder fieldBuilder2 = fbSinkHelper;
      ilGenerator.Emit(opcode8, (FieldInfo) fieldBuilder2);
      OpCode opcode9 = OpCodes.Callvirt;
      MethodInfo meth2 = getMethod2;
      ilGenerator.Emit(opcode9, meth2);
      OpCode opcode10 = OpCodes.Stloc;
      LocalBuilder local2 = localBuilder1;
      ilGenerator.Emit(opcode10, local2);
      OpCode opcode11 = OpCodes.Ldc_I4;
      int num4 = 0;
      ilGenerator.Emit(opcode11, num4);
      OpCode opcode12 = OpCodes.Stloc;
      LocalBuilder local3 = localBuilder2;
      ilGenerator.Emit(opcode12, local3);
      OpCode opcode13 = OpCodes.Ldc_I4;
      int num5 = 0;
      ilGenerator.Emit(opcode13, num5);
      OpCode opcode14 = OpCodes.Ldloc;
      LocalBuilder local4 = localBuilder1;
      ilGenerator.Emit(opcode14, local4);
      OpCode opcode15 = OpCodes.Bge;
      Label label5 = label2;
      ilGenerator.Emit(opcode15, label5);
      Label loc1 = label1;
      ilGenerator.MarkLabel(loc1);
      OpCode opcode16 = OpCodes.Ldarg;
      int num6 = 0;
      ilGenerator.Emit(opcode16, (short) num6);
      OpCode opcode17 = OpCodes.Ldfld;
      FieldBuilder fieldBuilder3 = fbSinkHelper;
      ilGenerator.Emit(opcode17, (FieldInfo) fieldBuilder3);
      OpCode opcode18 = OpCodes.Ldloc;
      LocalBuilder local5 = localBuilder2;
      ilGenerator.Emit(opcode18, local5);
      OpCode opcode19 = OpCodes.Callvirt;
      MethodInfo meth3 = getMethod1;
      ilGenerator.Emit(opcode19, meth3);
      OpCode opcode20 = OpCodes.Castclass;
      Type cls = SinkHelperClass;
      ilGenerator.Emit(opcode20, cls);
      OpCode opcode21 = OpCodes.Stloc;
      LocalBuilder local6 = localBuilder3;
      ilGenerator.Emit(opcode21, local6);
      OpCode opcode22 = OpCodes.Ldarg;
      int num7 = 0;
      ilGenerator.Emit(opcode22, (short) num7);
      OpCode opcode23 = OpCodes.Ldfld;
      FieldBuilder fieldBuilder4 = fbEventCP;
      ilGenerator.Emit(opcode23, (FieldInfo) fieldBuilder4);
      OpCode opcode24 = OpCodes.Ldloc;
      LocalBuilder local7 = localBuilder3;
      ilGenerator.Emit(opcode24, local7);
      OpCode opcode25 = OpCodes.Ldfld;
      FieldInfo field2 = field1;
      ilGenerator.Emit(opcode25, field2);
      OpCode opcode26 = OpCodes.Callvirt;
      MethodInfo meth4 = method1;
      ilGenerator.Emit(opcode26, meth4);
      OpCode opcode27 = OpCodes.Ldloc;
      LocalBuilder local8 = localBuilder2;
      ilGenerator.Emit(opcode27, local8);
      OpCode opcode28 = OpCodes.Ldc_I4;
      int num8 = 1;
      ilGenerator.Emit(opcode28, num8);
      OpCode opcode29 = OpCodes.Add;
      ilGenerator.Emit(opcode29);
      OpCode opcode30 = OpCodes.Stloc;
      LocalBuilder local9 = localBuilder2;
      ilGenerator.Emit(opcode30, local9);
      OpCode opcode31 = OpCodes.Ldloc;
      LocalBuilder local10 = localBuilder2;
      ilGenerator.Emit(opcode31, local10);
      OpCode opcode32 = OpCodes.Ldloc;
      LocalBuilder local11 = localBuilder1;
      ilGenerator.Emit(opcode32, local11);
      OpCode opcode33 = OpCodes.Blt;
      Label label6 = label1;
      ilGenerator.Emit(opcode33, label6);
      Label loc2 = label2;
      ilGenerator.MarkLabel(loc2);
      OpCode opcode34 = OpCodes.Ldarg;
      int num9 = 0;
      ilGenerator.Emit(opcode34, (short) num9);
      OpCode opcode35 = OpCodes.Ldfld;
      FieldBuilder fieldBuilder5 = fbEventCP;
      ilGenerator.Emit(opcode35, (FieldInfo) fieldBuilder5);
      OpCode opcode36 = OpCodes.Call;
      MethodInfo meth5 = method2;
      ilGenerator.Emit(opcode36, meth5);
      OpCode opcode37 = OpCodes.Pop;
      ilGenerator.Emit(opcode37);
      Label loc3 = label3;
      ilGenerator.MarkLabel(loc3);
      Type exceptionType = typeof (Exception);
      ilGenerator.BeginCatchBlock(exceptionType);
      OpCode opcode38 = OpCodes.Pop;
      ilGenerator.Emit(opcode38);
      ilGenerator.BeginFinallyBlock();
      Label label7 = ilGenerator.DefineLabel();
      OpCode opcode39 = OpCodes.Ldloc;
      LocalBuilder local12 = localBuilder4;
      ilGenerator.Emit(opcode39, local12);
      OpCode opcode40 = OpCodes.Brfalse_S;
      Label label8 = label7;
      ilGenerator.Emit(opcode40, label8);
      OpCode opcode41 = OpCodes.Ldarg;
      int num10 = 0;
      ilGenerator.Emit(opcode41, (short) num10);
      OpCode opcode42 = OpCodes.Call;
      MethodInfo meth6 = method4;
      ilGenerator.Emit(opcode42, meth6);
      Label loc4 = label7;
      ilGenerator.MarkLabel(loc4);
      ilGenerator.EndExceptionBlock();
      OpCode opcode43 = OpCodes.Ret;
      ilGenerator.Emit(opcode43);
      return methodBuilder;
    }

    private void DefineDisposeMethod(TypeBuilder OutputTypeBuilder, MethodBuilder FinalizeMethod)
    {
      MethodInfo method = typeof (GC).GetMethod("SuppressFinalize");
      ILGenerator ilGenerator = OutputTypeBuilder.DefineMethod("Dispose", MethodAttributes.Public | MethodAttributes.Virtual, (Type) null, (Type[]) null).GetILGenerator();
      OpCode opcode1 = OpCodes.Ldarg;
      int num1 = 0;
      ilGenerator.Emit(opcode1, (short) num1);
      OpCode opcode2 = OpCodes.Callvirt;
      MethodBuilder methodBuilder = FinalizeMethod;
      ilGenerator.Emit(opcode2, (MethodInfo) methodBuilder);
      OpCode opcode3 = OpCodes.Ldarg;
      int num2 = 0;
      ilGenerator.Emit(opcode3, (short) num2);
      OpCode opcode4 = OpCodes.Call;
      MethodInfo meth = method;
      ilGenerator.Emit(opcode4, meth);
      OpCode opcode5 = OpCodes.Ret;
      ilGenerator.Emit(opcode5);
    }
  }
}
